Interface
==========
Q1.

interface MyInterface{
	int a=10; 
	void show();
}
public class Test implements  MyInterface{
	public void show() {
		a++;
		System.out.println(a);
	}
	public static void main(String[] args) {
		Test obj=new Test();
		obj.show();
	}
}

A. Compile Time Error 
B. 10
C. 11
D. Runtime Error                

Ans.A	  

Q2.
interface MyInterface{
	void show();
}
public class Test implements  MyInterface{
	public static void main(String[] args) {
		Test obj=new Test();
		obj.show();
	}
}

A. Compile Time Error  
B. It will print 'Show'
C. No Output 
D. Runtime Error

Ans.A

Q3.
interface One{
	void show1();
}
interface Two{
	void show2();
}
public class Test implements  One,Two{
	public void show1(){
		System.out.println("Show1");
	}
	public static void main(String[] args) {
		Test obj=new Test();
		obj.show1();
	}
}


A. Compile Time Error 
B. It will print 'Show'
C. No Output
D. Runtime Error	


Ans.A

Q4.
interface MyInterface{
	int a=20;
}
public class Test implements  MyInterface{
	public void show1(){
		System.out.println(MyInterface.a);
	}
	public static void main(String[] args) {
		Test obj=new Test();
		obj.show1();
	}
}

A. Compile Time Error  
B. It will print '20' 
C. No Output 
D. Runtime Error
	
Ans.B

Q5.
interface MyInterface{
	void Show();
}
public class Test implements  MyInterface{
	void Show(){
		System.out.println("Show");
	}
	public static void main(String[] args) {
		Test obj=new Test();
		obj.Show();
	}
}


A. Compile Time Error 
B. It will print 'Show'
C. No Output
D. Runtime Error

Ans.A

Q6.
final interface MyInterface{
	void Show();
}
public class Test implements  MyInterface{
	public void Show(){
		System.out.println("Show");
	}
	public static void main(String[] args) {
		Test obj=new Test();
		obj.Show();
	}
}


A. Compile Time Error  
B. It will print 'Show' 
C. No Output 
D. Runtime Error

Ans.A

Q7.

interface MyInterface{
	abstract void show1();
}
abstract class Demo implements MyInterface{ }
public class Test extends Demo{
    public void show1(){
    	System.out.println("Show1");
    }
	public static void main(String[] args) {
		MyInterface obj=new Test();
		obj.show1();
 }
}

A. Compile Time Error 
B. It will print 'Show1' 
C. No Output
D. Runtime Error

Ans.B


Q8.
interface Inter1{
	int a=10;
}
interface Inter2{
	int a=20;
}
public class Test implements Inter1,Inter2{
   public static void main(String[] args) {
	   Test obj=new Test();
		System.out.println(obj.a);
 }
}

A. Compile Time Error  
B. 10 
C. 20 
D. Runtime Error

Ans.A

Q9.
interface MyInterface1{
	int a=10;
}
interface MyInterface2 extends MyInterface1{
	int a=20;
}
public class Test implements MyInterface2{
   public static void main(String[] args) {
	   Test obj=new Test();
		System.out.println(obj.a);
 }
}

A. Compile Time Error 
B. 10
C. 20 
D. Runtime Error

Ans.C

Q10.
interface MyInterface{

}
abstract class Demo implements MyInterface{
    
	abstract void show();
}
public class Test extends Demo{
    void show(){
		System.out.println("Show");
	}
   public static void main(String[] args) {
	   MyInterface obj=new Test();	
	   obj.show();
 }
}


A. Compile Time Error  
B. It will print 'Show' 
C. No Output 
D. Runtime Error

Ans.A

Q11.
interface MyInterface{
	int a=10;
	MyInterface(){
		System.out.println(a);	
	}
}
public class Test implements MyInterface{
   public static void main(String[] args) {
	   MyInterface obj=new Test();		
 }
}

A. Compile Time Error  
B. It will print '10' 
C. No Output 
D. Runtime Error

Ans.A

Q12.
interface One{
	int a=10;
}
interface Two{
	int a=20;
}
interface Three extends One,Two{
}
public class Test implements Three{
    public static void main(String[] args) {
       Test obj=new Test();
	  // Your Text	 
 }
}
Select the option to paste instead of '//Your 
Text' then it should display the value of 'a'
from Two interface.


A. System.out.println(obj.a);
B. System.out.println(Two.a); 
C. System.out.println(Three.a);
D. Not Possible
